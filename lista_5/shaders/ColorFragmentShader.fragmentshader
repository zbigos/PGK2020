#version 330 core

// Interpolated values from the vertex shaders
in vec3 Position_worldspace;
in vec3 Normal_cameraspace;
in vec3 EyeDirection_cameraspace;

in vec3 LightDirection_cameraspace[10];

in vec3 mat_color;
uniform float LightEmitterColor[10];

flat in int iid;
// Ouput data
out vec4 color;


// Values that stay constant for the whole mesh.
uniform sampler2D myTextureSampler;
uniform mat4 MV;
uniform vec3 LightPosition_worldspace[10];
uniform int emission_sources[10];

vec3 hsv2rgb(vec3 c)
{
    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);
    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);
    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);
}


vec3 calculate_Phong_singular(vec3 PhongDiffuse, vec3 PhongSpecular, vec3 normal, vec3 EyeDirection, vec3 LightColor, float LightPower, vec3 LightPosition, vec3 LightDirection) {
	// calculate per light properties
	float distance = length(Position_worldspace - LightPosition);

	// calculate diffuse angle the angle between camera and light
	float cosTheta = clamp(dot(normalize(normal), normalize(LightDirection)), 0, 1);

	// calculate something else for magnum Phong
	vec3 R = reflect(normalize(LightPosition),normalize(normal));
	float cosAlpha = clamp(dot(normalize(EyeDirection), -R), 0, 1);

	vec3 DiffusePartial = PhongDiffuse * LightColor * LightPower * cosTheta / (distance*distance);
	vec3 SpecularPartial = PhongSpecular * LightColor * LightPower * pow(cosAlpha,5) / (distance*distance);
	
	return DiffusePartial + SpecularPartial; 
}

bool am_I_emitter(int me) {
	for(int i = 0 ; i < 10; i++)
		if(me == emission_sources[i])
			return true;
	return false;
}

vec3 calculate_Phong_group(vec3 Material) {
	// load all needed variables

	vec3 MaterialDiffuse = Material;
	vec3 MaterialSpecular = vec3(0.3,0.3,0.3) * Material;
	vec3 MaterialAmbient = vec3(0.2,0.2,0.2) * Material;

	// load light properties

	if (!am_I_emitter(iid)) {
		vec3 c = MaterialAmbient;

		for(int index = 0; index < 10; index += 1) {

			vec3 LightColor = hsv2rgb(vec3(LightEmitterColor[index], 1.0, 1.0));
			float LightPower = 100.0f;

			// to jest tutaj dlatego żebyśmy się sami nie oświetlali.
			if (iid != index)
				c += calculate_Phong_singular(
					MaterialDiffuse, 
					MaterialSpecular, 
					Normal_cameraspace, 
					EyeDirection_cameraspace, 
					LightColor, 
					LightPower, 
					LightPosition_worldspace[index], 
					LightDirection_cameraspace[index]
				);
		}

		return c;

	} else {
		return Material;
	}
}

void main(){
	color = vec4(calculate_Phong_group(mat_color), 0.5);	
}