#version 330 core

// Input vertex data, different for all executions of this shader.
layout(location = 0) in vec3 vertexPosition_modelspace;
layout(location = 1) in vec3 object_color;
layout(location = 2) in vec4 instance_data;


// Output data ; will be interpolated for each fragment.
out vec4 fragmentColor;
// Values that stay constant for the whole mesh.
uniform mat4 MVP;
uniform vec3 position;
uniform float distance_scale;
uniform float cube_size;

vec3 hsv2rgb(vec3 c)
{
    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);
    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);
    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);
}

void main(){	
	// Output position of the vertex, in clip space : MVP * position
	vec3 instance_translation = vec3(instance_data[0], instance_data[1], instance_data[2]);
	gl_Position =  MVP * vec4((vertexPosition_modelspace * (2.0 - instance_translation[1]/45.0) + position + instance_translation), 1);

	// The color of each vertex will be interpolated
	// to produce the color of each fragment
	fragmentColor = vec4(hsv2rgb(vec3(instance_data[3], 1.0 , 1.0)), 0.1);
}

