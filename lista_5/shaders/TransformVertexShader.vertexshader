#version 330 core

// Input vertex data, different for all executions of this shader.
layout(location = 0) in vec3 vertexPosition_modelspace;
layout(location = 1) in vec3 object_color;
layout(location = 2) in vec4 instance_data;
layout(location = 3) in vec3 vertexNormal_modelspace;


out vec3 fragmentColor;

out vec3 mat_color;
out vec3 Position_worldspace;
out vec3 Normal_cameraspace;
out vec3 EyeDirection_cameraspace;
out vec3 LightDirection_cameraspace[10];

// ugly hack to get instance id at fragmentshader
in int gl_InstanceID;
flat out int iid;

uniform float distance_scale;
uniform float cube_size;
uniform mat4 MVP;
uniform mat4 V;
uniform mat4 M;
uniform vec3 LightPosition_worldspace[10];

uniform int emission_sources[10];

uniform vec3 CameraPosition_worldspace;


vec3 hsv2rgb(vec3 c)
{
    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);
    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);
    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);
}

void calculate_light_sources(int index, vec3 instance_translation, vec3 EyeDirection_cameraspace) {

	vec3 LightPosition_cameraspace = ( V * vec4(LightPosition_worldspace[index],1)).xyz;
	LightDirection_cameraspace[index] = LightPosition_cameraspace + EyeDirection_cameraspace;
}

void main(){
	// the ugly hack for instance_ID
	iid = gl_InstanceID;

	// unpack instancing crap	
	vec3 instance_translation = vec3(instance_data[0], instance_data[1], instance_data[2]);

	// set scale of instance
	float scale = 0.0;
	if (gl_InstanceID == 99) {
		scale = 1.0;
	} else {
		scale = 12.0 - instance_data[1]/50.0;
	}

	// calculate the position via MVP
	vec3 ddd = instance_translation + scale * vertexPosition_modelspace;
	gl_Position =  MVP * vec4(instance_translation + scale * vertexPosition_modelspace,1);

	EyeDirection_cameraspace = -( V * M * vec4(ddd,1)).xyz;
	Normal_cameraspace = ( V * M * vec4(vertexNormal_modelspace,0)).xyz;

	// calculate lightsource positions.
	for(int i = 0; i < 10; i++) {
		calculate_light_sources(i, ddd, EyeDirection_cameraspace);
	}

	// something something stolen from tutorial
	Position_worldspace = (M * vec4(ddd,1)).xyz;

	mat_color = vec3(0.2, 0.2, 0.2) + 0.8 * hsv2rgb(vec3(instance_data[3], 1.0, 1.0));
}