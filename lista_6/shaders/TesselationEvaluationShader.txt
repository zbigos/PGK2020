#version 430

layout(quads) in;
in vec3 tcPosition[];
out vec3 tePosition;
out vec2 tePatchDistance;
uniform mat4 Projection;
uniform mat4 Modelview;
uniform mat4 MVP;
uniform int preteselation;
uniform vec3 ChunkPosition;
out vec2 UV;
uniform sampler2D myTextureSampler;
uniform int background;
uniform int cartesian;

void main()
{
    UV = ((1.0/preteselation) * (gl_TessCoord + vec3(gl_PrimitiveID/preteselation, gl_PrimitiveID%preteselation, 0.0)).xy);

    float ht = 1.0;
    if (background == 0) 
        ht = texture( myTextureSampler, UV ).r * 0.1 + 1.0;

    vec3 cartesian_position = ChunkPosition + (1.0/preteselation) * (gl_TessCoord + vec3(gl_PrimitiveID/preteselation, gl_PrimitiveID%preteselation, ht));


    vec3 normcartesian = vec3(cartesian_position[0], cartesian_position[1], cartesian_position[2]);
    if (background != 0) {
        normcartesian = vec3((cartesian_position[0] * 360.0) - 360.0, (cartesian_position[1] * 180.0) - 90.0, cartesian_position[2] + 0.5);
    }


    if (cartesian == 1) {
        gl_Position = MVP * vec4(normcartesian, 1.0);
    } else {
        float earthradus = 5.0 * ht;
        
        if (background != 0) {
            earthradus = 4.98;
        }

        float hradus = earthradus*cos(3.1415/180.0 * normcartesian[1]);
        vec3 polarposition = vec3(hradus * cos(3.1415/180.0 * normcartesian[0]), earthradus*sin(3.1415/180.0 * normcartesian[1]), hradus * sin(3.1415/180.0 * normcartesian[0]));

        gl_Position = MVP * vec4(polarposition, 1.0);
    }
}